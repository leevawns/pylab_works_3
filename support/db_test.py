from db_support           import *
#from inifile_support      import *
from time                 import *
from vragenlijst_protocol import *
from vragenlijst_answers  import *


# ***********************************************************************
# ***********************************************************************
def Read_NKCV_DBase () :
  """
  Reads NKCV database through ODBC,
  both mdb (Access 2003) and accdb (Access 2007) are supported.
  """
  DB = DataBase ( 'Hein1' )

  Fields = 'RadNumm, IdePati, NKCVNummer, PatWoon'
  SQL = "SELECT " + Fields + " FROM codPatGege"
  Result, RowID = DB.Do_SQL ( SQL )
  for Record in Result [:3] :
    v3print ( Record )
# ***********************************************************************



# ***********************************************************************
# ***********************************************************************
def My_Main () :
  
  # 1, 2, 3, 4, 5
  #Test_Defs ( 1, 2, 3, 4, 5, 6 )
  Test_Defs ( 1, 2 )
  # 1 = delete old database, create new one
  # 2 = lees orginele protocollen en store in DB
  # 3 = lees patienten data from TO_pat.db in stop deze in de database
  # 4 = lees opnamen data from TO_pat.db in stop deze in de database
  # 5 = lees PatientText data from TO_pat.db in stop deze in de database
  # 6 = lees alle antwoorden

  # 7 = lees orgineel protocol, interpreteer en print gegevens
  # 8 = testread NKCV database

  # *******************************
  # TestOrganizer aggregatie
  # *******************************
  print 'TO-aggregatie'
  Base_Dir     = 'D:/d_midorg/'
  Protocol_Dir = Base_Dir + 'Protocol/'
  Data_Dir     = Base_Dir + 'mid-data/'

  # *******************************
  # Connect to Database
  #         or
  # Create a New DataBase
  # !!!!! Het weggooien en creeeren van een nieuwe databse
  #       is 3 maal sneller !!!!!
  # *******************************
  DataBase_Name = 'D:/Data_Python_25/support/test_vl.db'
  TO_pat_DB     = 'D:/d_midorg/mid-data/patient/TO_pat.db'
  

  # **************************************************************
  # Delete the complete database
  # **************************************************************
  if Test ( 1 ) :
    File_Delete ( DataBase_Name )


  # **************************************************************
  # We can connect to the  DataBase after it's deleted
  # **************************************************************
  DB = DataBase ( DataBase_Name )

  # **************************************************************
  # Zoek alle vragenlijst definities en
  # berg deze op in de database
  # **************************************************************
  if Test ( 2 ) :
    Renew = True

    # *******************************
    # NEW Vragenlist Table: Primary Key = VLID (autogenerated)
    # *******************************
    # Create a dummy Vraaglist to get the table definition
    NVL = t_Vragenlijst ( )
    Table_Def_VL = NVL.Get_Table_Def ( 'VraagLst' )
    DB.Create_Table ( Table_Def_VL, Renew )

    # *******************************
    # NEW Vragen Table: Primary Key = VID (autogenerated)
    # *******************************
    VV = NVL.Dummy_Vraag
    Table_Def_VV = VV.Get_Table_Def ( 'Vraag' )
    DB.Create_Table ( Table_Def_VV, Renew )

    # *******************************
    # NEW SubSchalen Table: Primary Key = VLSID (autogenerated)
    # *******************************
    SS = NVL.Dummy_SubSchaal
    Table_Def_SS = SS.Get_Table_Def ( 'SubSchaal' )
    DB.Create_Table ( Table_Def_SS, Renew )

    # *******************************
    # NEW Vraag_SubSchalen Table: Primary Key = VSID (autogenerated)
    # *******************************
    VSS = NVL.Dummy_Vraag.Dummy_Vraag_SubSchaal
    Table_Def_VSS = VSS.Get_Table_Def ( 'Vraag_SubSchaal' )
    DB.Create_Table ( Table_Def_VSS, Renew )

    # *******************************
    # NEW Antwoorden Table: Primary Key = AID (autogenerated)
    # *******************************
    Table_Def = [ 'Answers' ,
      '"AID"       INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT',
      '"Antwoord"  TEXT ' ]
    DB.Create_Table ( Table_Def, Renew )


    # *******************************
    # Create Binding Tables
    # *******************************
    VL_V  = Binding_Table ( DB, NVL.ID_Column, VV.ID_Column )
    VL_S  = Binding_Table ( DB, NVL.ID_Column, SS.ID_Column )
    VL_A  = Binding_Table ( DB, 'POID', VV.ID_Column, 'AID' )
    VL_VS = Binding_Table ( DB, VV.ID_Column, SS.ID_Column, VSS.ID_Column )

    # *******************************
    # It's much faster to only commit after each vragenlijst
    # *******************************
    DB.Auto_Commit = False

    # *******************************
    # Find all vragenlijsten protocollen
    # en stop deze in de database
    # *******************************
    VLs = Find_Files ( Protocol_Dir + 'VraagLST/', '*.vli', True )
    #VLs = [ [ '', 'ess' ] ]       # single quotes
    VLs.insert ( 0, [ '', 'scl-90' ] )
    VLs.insert ( 0, [ '', 'cis20r' ] )
    v3print ( 'Aantal Vragenlijsten =', len ( VLs ) )

    INDX = 1
    for _testname in VLs[:10] :
      TestName = _testname [1]
      v3print ( 'Vragenlijst :', INDX, TestName )
      INDX += 1

      #*************************************
      # Lees een vragenlijst protocol
      #*************************************
      filename = Protocol_Dir + 'VraagLST/' + TestName + '.vli'
      VL = t_Vragenlijst ( filename )

      #*************************************
      # Add vragenlijst to VRAGENLIST table
      #*************************************
      VL_RowID = VL.Do_SQL_Insert ( DB, 'VraagLst')

      #*************************************
      # Add the questions table + Bindings table
      #*************************************
      VraagIDs = {}
      for V in VL.Vraag [1:] :
        RowID = V.Do_SQL_Insert ( DB, 'Vraag' )
        VL_V.Add ( VL_RowID, RowID )
        VraagIDs [ V.Indx ] = RowID

      #*************************************
      # Add the SubSchaal table + Bindings table
      # Also create a list of SubSchalen
      #*************************************
      SubSchaalIDs = {}
      for SS in VL.SubSchaal :
        RowID = SS.Do_SQL_Insert ( DB, 'SubSchaal' )
        VL_S.Add ( VL_RowID, RowID )
        SubSchaalIDs [ SS.Name_ ] = RowID

      #*************************************
      # SubSchalen waardering per subvraag opbergen
      #*************************************
      # Doorloop alle vragen
      for V in VL.Vraag [1:] :
        for SPSS in V.Vragenlijst.SPSS_FullName :
          SS = V.SubSchalen [ SPSS ]
          if SS.Not_Empty () :
            print '#@#@#@#@', V.Indx, SS.SPSS, SS.Values
            print VraagIDs [ V.Indx ], SubSchaalIDs [ SS.SPSS ]
            RowID = VSS.Do_SQL_Insert ( DB, 'Vraag_SubSchaal' )
            VL_S.Add ( VL_RowID, RowID )
            VL_VS.Add ( VraagIDs [ V.Indx ], SubSchaalIDs [ SS.SPSS ], RowID )

            
            
            

      #*************************************
      # Just 1 commit for each vragenlijst
      #*************************************
      DB.conn.commit ()

  # **************************************************************
  # TO_pat.db Patient table lezen en invoegen
  # **************************************************************
  if Test ( 3 ) :

    Pat_DB = DataBase ( TO_pat_DB )
    #v3print ( Pat_DB.MetaData )
    Pat_DB.Print_Metadata ()
    Table_Info = Pat_DB.Get_MetaData_Table ( 'Patient' )

    # Get the definition of table "Patient" from TO_pat.db
    # and create a new definition, with
    #   - an extra PID, which is the primary key
    #   - ignore all other primary key information
    Table_Def = [ 'Patient' ]
    Table_Def.append ( '"PID" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' )
    for Field in Table_Info:
      line = '"' + Field[1] + '" ' + Field[2]
      if Field[3] != 0 :
        line += ' NOT NULL'
      Table_Def.append ( line )
    #v3print ( Table_Def )

    # Recreate the table
    DB.Create_Table ( Table_Def, drop = True )

    SQL = 'SELECT * FROM "Patient"'
    Patient_Data = Pat_DB.Do_SQL ( SQL )
    """
    print type(Patient_Data), len(Patient_Data)
    print type(Patient_Data[0]), type(Patient_Data[1])
    print len(Patient_Data[0])
    print Patient_Data[1]
    print Patient_Data
    """
    PID = 1
    INS = 'INSERT INTO "Patient" VALUES ('
    for Patient in Patient_Data [0][1:] :
      v3print ( 'Import Patient', PID, Patient[0] )
      SQL = INS + "'" + str ( PID ) + "',"
      for item in Patient :
        SQL += "'" + str ( item ) + "',"
      SQL = SQL [:-1] + ')'
      #v3print ( 'NEWSQL:', SQL )
      DB.Do_SQL ( SQL )
      PID += 1


  # **************************************************************
  # TO_pat.db Opnamen table lezen en invoegen
  # **************************************************************
  if Test ( 4 ) :

    # Create a bindings table
    Bind_Table_PO = Binding_Table ( DB, 'PID', 'POID' )
    Bind_Table_OV = Binding_Table ( DB, 'POID', 'VID' )

    Pat_DB = DataBase ( TO_pat_DB )
    #Pat_DB.Print_Metadata ()
    Table_Info = Pat_DB.Get_MetaData_Table ( 'Opnamen' )

    # Get the definition of table "Opnamen" from TO_pat.db
    # and create a new definition, with
    #   - an extra PID, which is the primary key
    #   - ignore all other primary key information
    Table_Def = [ 'Opnamen' ]
    Table_Def.append ( '"POID" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' )
    # last field is ID, we don't use that, instead Answers
    for Field in Table_Info [ : -1 ]:
      line = '"' + Field[1] + '" ' + Field[2]
      if Field[3] != 0 :
        line += ' NOT NULL'
      Table_Def.append ( line )
    Table_Def.append ( '"Answers" TEXT' )

    # Recreate the table
    DB.Create_Table ( Table_Def, drop = True )

    SQL = 'SELECT * FROM "Opnamen"'
    Patient_Data = Pat_DB.Do_SQL ( SQL )

    POID = 1
    Patient_Previous = None
    INS = 'INSERT INTO "Opnamen" VALUES ('
    for Patient in Patient_Data [0][1:] :
      if Patient[0] != Patient_Previous :
        v3print ( 'Import Opnamen', POID, Patient[0] )

      SQL = INS + "'" + str ( POID ) + "',"
      for item in Patient :
        SQL += "'" + str ( item ) + "',"
      SQL = SQL [:-1] + ')'
      #v3print ( 'NEWSQL:', SQL )
      DB.Do_SQL ( SQL )

      # Add Info to BindTable
      if Patient[0] != Patient_Previous :
        Patient_Previous = Patient [0]
         # Find the corresponding patient
        SQL = "SELECT PID FROM Patient WHERE LOWER(PatNr) = '" +Patient[0].lower() + "'"
        Result = DB.Do_SQL ( SQL )
        try :
          PID = Result [0][1][0]
        except :
          PID = '684684684'
          v3print ( 'ADD Opname, no patient found', Patient[0] )
      Bind_Table_PO.Add ( PID, POID )

      Protocol      = Patient [5].split('.')[0].lower()
      Protocol_Kind = Patient [6]
      # Add Info to BindTable
      if Protocol_Kind == 1 :  ## Vraaglist
        SQL = "SELECT VLID FROM VraagLst WHERE LOWER(Name) = '" +Protocol + "'"
        Result = DB.Do_SQL ( SQL )
        try :
          VLID = Result [0][1][0]
        except :
          VLID = '684684684'
          v3print ( 'Bind Opname-VraagLst, not found:', Protocol )

        Bind_Table_OV.Add ( POID, VLID)

      POID += 1

  # **************************************************************
  # TO_pat.db Patient_Text table lezen en invoegen
  # **************************************************************
  if Test ( 5 ) :

    # Create a bindings table
    Bind_Table = Binding_Table ( DB, 'PID', 'PTID' )

    Pat_DB = DataBase ( TO_pat_DB )
    #Pat_DB.Print_Metadata ()
    Table_Info = Pat_DB.Get_MetaData_Table ( 'Patient_Text' )

    # Get the definition of table "Opnamen" from TO_pat.db
    # and create a new definition, with
    #   - an extra PID, which is the primary key
    #   - ignore all other primary key information
    Table_Def = [ 'Patient_Text' ]
    Table_Def.append ( '"PTID" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' )
    for Field in Table_Info :
      line = '"' + Field[1] + '" ' + Field[2]
      if Field[3] != 0 :
        line += ' NOT NULL'
      Table_Def.append ( line )

    # Recreate the table
    DB.Create_Table ( Table_Def, drop = True )

    SQL = 'SELECT * FROM "Patient_Text"'
    Patient_Data = Pat_DB.Do_SQL ( SQL )

    PTID = 1
    INS = 'INSERT INTO "Patient_Text" VALUES ('
    for Patient in Patient_Data [0][1:] :
      v3print ( 'Import Pat_Text', PTID, Patient[0] )

      SQL = INS + "'" + str ( PTID ) + "',"
      for item in Patient :
        SQL += "'" + str ( item ).replace ( "'", "''" ) + "',"
      SQL = SQL [:-1] + ')'
      #v3print ( 'NEWSQL:', SQL )
      DB.Do_SQL ( SQL )

      # Find the corresponding patient
      SQL = "SELECT PID FROM Patient WHERE LOWER(PatNr) = '" +Patient[0].lower() + "'"
      Result = DB.Do_SQL ( SQL )
      try :
        PID = Result [0][1][0]
      except :
        PID = '684684684'
        v3print ( 'ADD Text, no patient found:', Patient[0] )
      Bind_Table.Add ( PID, PTID )

      PTID += 1

  # **************************************************************
  # Lees alle antwoorden en
  # berg deze op in de database.
  # Als het vragenlijst definitie bestand niet wordt gevonden,
  # kunnen de antwoorden niet zinvol worden opgeborgen,
  # en wordt een foutmelding geprint.
  # **************************************************************
  if Test ( 6 ) :
    # *******************************
    # Read answers and put them in the database
    # *******************************
    DB.Auto_Commit = False
    VLs = Find_Files ( Protocol_Dir + 'VraagLST/', '*.vli', True )
    VLs = [ [ '', 'scl-90' ] ]       # single quotes

    # Create Bind_Table
    VL_A = Binding_Table ( DB, 'POID', 'VID', 'AID' )

    AID = 1
    for VLtot in VLs :
      VL = VLtot[1].lower()
      v3print ( 'Read Vragenlijst Answers from ', VL )
      #for VL in [ 'aap', 'scl-90' ] :

      SQL = 'SELECT VLID FROM VraagLst WHERE Name = ' +\
            "'" + VL + "'"
      x, y = DB.Do_SQL ( SQL )
      Result, RowID = DB.Do_SQL ( SQL )
      if len ( Result ) > 1 :
        VID = Result [1][0]
        v3print ( 'VID =', VID )
      else :
        continue

      # Get number of items
      SQL = 'SELECT Vraag_N FROM VraagLst WHERE LOWER(Name) = "' + VL + '"'
      NI, RowID = DB.Do_SQL ( SQL )

      if len ( NI ) > 1 :
        NI = NI [1] [0]
        v3print ( '   Aantal Vragen = ', NI )

        # Get all answer files
        #print 'RRR',Data_Dir + 'VraagLST/' + VL
        Answers = Find_Files ( Data_Dir + 'Vraaglst/' + VL, '*.dat', True )
        for Answer in Answers :
          # Read answers
          FileName = Data_Dir + 'VraagLST/' + VL + '/'+ Answer[1]+ '.dat'
          VAs = Read_VraagList_Answers ( FileName )
          print VAs

          Patient = Answer [1] [:-1]
          Indx    = str ( ord ( Answer [1] [-1] ) - ord ('A') + 1 )
          Datum   = strftime ( "%d-%m-%Y", localtime ( os.path.getctime ( FileName ) ) )
          #v3print ( '  Patient = ', Patient, '  Index =', Indx, '  Datum =', Datum )

          while len ( VAs ) < NI :
            VAs.append ( '' )
          All_Antw = chr ( 254 ).join ( VAs )
          #v3print ( '    Answer-1 =',  VAs [0] )
          #v3print ( '    Answers =',  All_Antw [ : min ( 60, len ( All_Antw ))])

          SQL = 'SELECT POID FROM Opnamen WHERE' +\
                " PatNr = " + "'" + Patient + "'" +\
                " AND LOWER(Filnam) = '" + VL + ".vli'" +\
                " AND Test_Count = " + Indx
          #print SQL
          Result, RowID = DB.Do_SQL ( SQL )
          if len ( Result ) > 1 :
            v3print ( '  Patient = ', Patient, '  Index =', Indx, '  Datum =', Datum )
            v3print ( '    Answers =',  All_Antw [ : min ( 60, len ( All_Antw ))])

            POID = Result [1][0]
            v3print ( '    POID =', POID )

            # Store all answers also in Opname table
            SQL = "UPDATE Opnamen SET Answers = '" + All_Antw +\
                  "' WHERE POID = " + str ( POID )
            DB.Do_SQL ( SQL )

            for VA in VAs :
              SQL = 'INSERT OR REPLACE INTO "Answers" VALUES ( ' + \
              "'" + str ( AID ) + "','" + str( VA ) + "')"
              DB.Do_SQL ( SQL )

              #print 'RRR',POID, VID, AID
              VL_A.Add ( POID, VID, AID )
              AID += 1

          
        # Just 1 commit for each vragenlijst
        DB.conn.commit ()

      else :
        print '  ***** Vragenlijst definitie niet gevonden:', VL


  # **************************************************************
  # Lees alle antwoorden en
  # berg deze op in de database.
  # Als het vragenlijst definitie bestand niet wordt gevonden,
  # kunnen de antwoorden niet zinvol worden opgeborgen,
  # en wordt een foutmelding geprint.
  # **************************************************************
  if Test ( 66 ) :
    # *******************************
    # Read answers and put them in the database
    # *******************************
    DB.Auto_Commit = False
    VLs = Find_Files ( Protocol_Dir + 'VraagLST/', '*.vli', True )
    VLs = [ [ '', 'scl-90' ] ]       # single quotes

    for VLtot in VLs :
      VL = VLtot[1].lower()
      print 'Read Vragenlijst Answers from ', VL
      #for VL in [ 'aap', 'scl-90' ] :

      # Get number of items
      SQL = 'SELECT NI FROM Protocol NI WHERE LOWER(Naam) = "' + VL + '"'
      NI, RowID = DB.Do_SQL ( SQL )
      #print '######',VL, len ( NI ), NI

      if len ( NI ) > 1 :
        NI = NI [1] [0]
        #print 'NIIIIIIIIII',VL,NI

        # Get all answer files
        #print 'RRR',Data_Dir + 'VraagLST/' + VL
        Answers = Find_Files ( Data_Dir + 'Vraaglst/' + VL, '*.dat', True )
        for Answer in Answers :
          #print 'XXX',Answer
          # Read answers
          FileName = Data_Dir + 'VraagLST/' + VL + '/'+ Answer[1]+ '.dat'
          VTs = Read_VraagList_Answers ( FileName )
          #print VL,VTs

          Table_Name = '_VA_'+ VL

          Patient = Answer [1] [:-1]
          Indx    = str ( ord ( Answer [1] [-1] ) - ord ('A') + 1 )
          Datum   = strftime ( "%d-%m-%Y", localtime ( os.path.getctime ( FileName ) ) )
          #print Answer[1], Patient, Indx, Datum

          """
          # TIJDELIJK LIJKT NIET TE WERKEN
          SQL = 'DELETE FROM "' + Table_Name + '"' +\
                "  WHERE Indx=0"
          DB.Do_SQL ( SQL )
          """

          #"""
          # TIJDELIJK REMOVE DUPLICATE
          SQL = 'DELETE FROM "' + Table_Name + '"' +\
                '  WHERE Patient="' + Patient + '" AND ' +\
                '        Indx=' + Indx
          DB.Do_SQL ( SQL )

          # Store them in the database
          SQL = 'INSERT INTO "' + Table_Name +'" VALUES ( ' + \
            '"' + Patient + '","' + Indx + '","' + Datum
          while len ( VTs ) < NI :
            VTs.append ( '' )
          for i in range ( NI ) :
            SQL += '","' + VTs[i]
          SQL += '")'
          DB.Do_SQL ( SQL )
          #"""
        # Just 1 commit for each vragenlijst
        DB.conn.commit ()

      else :
        print '  ***** Vragenlijst definitie niet gevonden:', VL


  # **************************************************************
  # lees een orgineel protocol,
  # interpreteer dit en print de gegevens
  # **************************************************************
  if Test ( 7 ) :
    # temporary select 1 vragenlijst
    VLs = [ [ '', 'satisfactie_v4_2005' ] ]
    VLs = [ [ '', 'totale_test_vragenlijst_module2' ] ]
    VLs = [ [ '', 'act_lijst' ] ]
    VLs = [ [ '', 'aims' ] ]
    VLs = [ [ '', 'pswq' ] ]      # SPSS ??
    VLs = [ [ '', 'ess' ] ]       # single quotes


    for VL in VLs :
      filename = Protocol_Dir + 'VraagLST/' + VL[1] + '.vli'

      #*************************************
      # Lees het vragenlijst protocol
      #*************************************
      VL = t_Vragenlijst ( filename )
      #*************************************

      VL.Print_Algemeen   ()
      VL.Print_Subschalen ()
      VL.Print_Vragen     ()

  # **************************************************************
  # Patientgegevens uit NKCV DataBase lezen
  # **************************************************************
  if Test ( 8 ) :
    Read_NKCV_DBase ()

  if Test ( 9 ) :
    Answer_Table = '_VA_cis20r'
    SQL = 'INSERT OR REPLACE INTO ' + Answer_Table + \
          "  Values ( 0684, 3, '20-10-98', 3, 4 )"
    print DB.Do_SQL ( SQL )
    
  Test_Time()
# ***********************************************************************


# ***********************************************************************
# ***********************************************************************
if __name__ == '__main__':
  '''
  import cProfile
  command = "My_Main()"
  #cProfile.runctx( command, globals(), locals(),
  #  filename = os.path.join ( Application.Dir, "PyLab_Works.profile" ) )

  #import cProfile
  #command = """main()"""
  cProfile.runctx( command, globals(), locals(), filename="aap2.profile" )
  sys.argv = ['asd','-f','pstats','-o','aap2.dot','aap2.profile']
  import gprof2dot
  gprof2dot.Main().main()

  from system_support import Run, RunWait
  RunWait(['P:/program Files/Graphviz2.22/bin/dot.exe','-Tpng','-oaap2.png','aap2.dot'])
  Run(['aap2.png'],shell=True)
  #Run(['python','gprof2dot.py'])
  '''
  My_Main()

# ***********************************************************************

pd_Module ( __file__ )
